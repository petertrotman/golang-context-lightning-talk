Beginners Guide to Context
18 August 2016
Tags: go golang context

* Hi I'm Paul

- CTO @ Daily Burn
- Started using Go about 5 years ago
- We now use Go for queueing, real time messaging, ETL, devops

: I've been using Go for the past 5 years, attended the first 2 gophercon's and lots of go talks at GoogleIO over the years

: I don't get to write too much code now but almost all the code I do write is in Go

: Experimenting with Go as a language of choice for web development

.image images/logo_horizontal.svg

: -------------------------------------------------------------------------------

* Let's Talk

- Goal of this talk is to introduce you to the context package
- How to use it, Where to use it
- Some best practices picked up from around the web

.image images/context.jpg

: When I first read the context blog post I found it a bit hard to wrap my head around the appropriate use of the package

: The idea and the reasoning behind it made perfect sense but the actual in practice use cases weren't completely clear to me

: I'll try to keep this at a beginner/intermediate level and not get into to many complex weeds

: -------------------------------------------------------------------------------

* The Problem(s)

- In Go servers each new request spawns it's own goroutine
- Goroutines don't have any 'thread local' state
- Your code is responsible for things like things like cancellation, time outs and data

.image images/lifecycle_diagram.png

: When a Go server receives a request it spawns a new goroutine specifically to handle the request

: These request handling goroutines often spin up additional goroutines of their own to do things like connect to databases, talk to RPC services or do computations

: The other side of goroutines which you have probably noticed is that you are responsible for managing the lifecycle of any goroutine your code creates.

: In the case of a request there are cases where a request may end before all the goroutines you created to do work for you have finished. In these cases you also need to have some way to cancel or stop the goroutines you've created

: If you've written much go code you have probably already tried several ways of doing this.

: The context package seeks to provide a nice standardized way to solve for these two problems - how to share data and how to manage the lifecycle of your goroutines.

: -------------------------------------------------------------------------------

* The Solution

- The *context* package provides a standard way to solve the problems of managing state during a request

*context* addresses:

- Request scoped data
- Cancellation, Deadlines & Timeouts
- It is safe for concurrent use

See: Cancellation, Context, and Plumbing by Sameer Ajmani (_GothamGo_ _2014_)

: The focus of the package is to provide a standardized mechanism for cancellation

: -------------------------------------------------------------------------------

* Some Context for context

- The *context* package originated out of Google and was announced officially in July 2014
- The package satisfies the need for request scoped data and provides a standardized way to handle cancellation and deadlines
- It provides a way to facilitate across API boundaries to goroutines created when handling a request

- For reference:

.link https://blog.golang.org/context https://blog.golang.org/context
.link https://blog.golang.org/pipelines https://blog.golang.org/pipelines
.link https://godoc.org/golang.org/x/net/context golang.org/x/net/context

: context package release a couple of years ago
: motivation explained in the announcing blog post
: has gained more widespread use in the community

: -------------------------------------------------------------------------------

* Context and Go 1.7

- With the release of Go 1.7 context is now part of the core library
- The *context* package has been around long enough to have proven its worth
- Along with this are some additional changes to *net*, *net/http* and *os/exec*
- All of this will make it even easier to work with and are a great reason you should all consider using it in your projects

- *golang.org/x/net/context* becomes *context*

: Context has now proven itself valuable enough that it's being added to the core library and some useful helpers are being added to other core libraries to make it even easier to work with.

: -------------------------------------------------------------------------------

* The Context Type

- *context* is made up of the Context Type along with some supporting functions

.code code/context.txt

: So what is context?

: -------------------------------------------------------------------------------

* Done()

- The *Done* function returns a channel that acts as a cancellation signal to functions running on behalf of a context
- When the channel is closed the functions should end execution and exit

.code code/done1.txt

: Callout context instantation
: Callout cancal call
: Callout selecting on ctx.Done()

: -------------------------------------------------------------------------------

* Err(), Deadline()

- The Err() function returns an error indicating why the Context was cancelled
- The Deadline() function allows a sub-operation to determine if it should start work
- Deadline() returns both a time value indicating when work should be cancelled along with a boolean indicating if a deadline has been set on the context

.code code/deadline.txt

: Callout instantiation with deadline time
: Callout how we read and check deadline expiration
: Explain that deadline signals Done channel

: -------------------------------------------------------------------------------

* Value()

- The Value() function provides a way to load request scoped data that has been stored on the context

.code code/value.txt

A few notes from recent context conversations online:

- Context value handling is completely type unsafe and can't be checked at compile time
- Essentially a `map[interface{}]interface{}`
- Good examples of data to store in context include data extracted from headers or cookies, userID's tied to auth information, etc

: Packages that define a Context key should provide type-safe accessors for the values stores using that key

: -------------------------------------------------------------------------------

* Derived Contexts

- The context package provides functions that derive new Context values from existing ones
- These Contexts form a tree and when any Context is cancelled all those dervied from it are also cancelled
- Provides a mechanism to manage the lifecycle of dependent functions within a request scoped operation

.image images/derived_context.png

: The typical workflow for using contexts is to create a base context at the entry point
: Then to derive new contexts when adding new values or deadline/cancellation contraints

: -------------------------------------------------------------------------------

* Deriving Contexts

: There are several functions that can be used to instantiate contexts

Background()

.code code/func_background.txt

- Typically the top level Context for incoming requests

: Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests

TODO()

.code code/func_todo.txt

- If it's unclear what Context to use or it is not yet available use TODO never send nil for a Context parameter

: TODO I believe was created as a convenience for factoring context into existing code bases
: TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter). TODO is recognized by static analysis tools that determine whether Contexts are propagated correctly in a program

* Deriving Contexts (cont'd)

: -------------------------------------------------------------------------------

WithCancel():

.code code/with_cancel.txt

- Returns a copy of the parent with a new Done channel
- The context's Done channel is closed when the cancel function is called or the parent context Done channel is closed

: WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.

: Canceling the context releases resources associated with it, code should call cancel as soon as the operations running in this context complete

: -------------------------------------------------------------------------------

WithDeadline()

.code code/with_deadline.txt

- Takes a time param and returns a copy of the parent context with the deadline adjusted to be no later than the time parameter

- The context's Done channel is closed when the deadline expires, when the returned cancel function is called or when the parent's Done channel is closed (whichever comes first)

: If the parent's deadline is already earlier than the time param the parent deadline holds.

: WithDeadline returns a copy of the parent context with the deadline adjusted to the value passed in.

: the returned context's Done channel is closed when the deadline expires, when the returned cancel function is called, or when the parent context's Done channel is closed, whichever happens first.

: -------------------------------------------------------------------------------

* Deriving Contexts (cont'd)

WithTimeout()

.code code/with_timeout.txt

- Returns a context with the deadline set to the current time plus the value of the timeout
- Code should call cancel as soon as operations running this Context complete

: WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).

: Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete

WithValue()

.code code/with_value.txt

- Returns a copy of the parent in which the value for the specified key is set to val

: WithValue returns a copy of parent in which the value associated with key is val.

: Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions

: -------------------------------------------------------------------------------

* Demo app

- To demonstrate some of these concepts let's take a look at a small sample app
- We'll build a very simple search engine with a new twist on search

: -------------------------------------------------------------------------------

* DuckDuckGopher

.image images/duckduckgopher.png

: -------------------------------------------------------------------------------

* DuckDuckGopher

- So what does our app actually do?
- User types in a search term and gets a page with some results
- User account required for our very exclusive search engine
- Our cutting edge innovation is to provide a gif to visualize the result

.image images/demo_screen.png

: I can hear the VC's getting ready to call right now

: -------------------------------------------------------------------------------

* So how does it work?

- Search request made to web app
- Authentication cookie checked
- Query call made to DuckDuckGo API
- Keyword search call made to Giphy API
- Results returned to browser

.image images/app_diagram.png

: We're going to use context to help manage how we gather the results and return the values

: -------------------------------------------------------------------------------

* Components

- *Web* *Server*
- *session* package
- lookup package (DuckDuckGo Answers API, Giphy API)

: Explain in a little depth what each component will do

: -------------------------------------------------------------------------------

* Web Server

- *app.go* -> HTTP server handles all web requests for the app

Handlers:

*authentication:*
- *login:* renders login page
- *logout:* destroys active session
- *authenticate:* creates new auth session

*search:*
- *home:* renders main search page
- *search:* processes search request and returns results

: outline that we'll walk through first the authentication code then the search codea

: -------------------------------------------------------------------------------

* Web Server - authentication

.code code/login.txt

.code code/logout.txt

.code code/authenticate.txt

: To demonstrate very simple cookie authentcation we use the gorilla/sessions library
: Our login/logout/authenticate actions allow a user to sign in with a valid session and to logout of that session

: -------------------------------------------------------------------------------

* session Package (interlude)

.code code/session_package.txt

: -------------------------------------------------------------------------------

* session Package (interlude cont'd)

.code code/session_fromreq.txt

: -------------------------------------------------------------------------------

* session Package (interlude cont'd)

.code code/session_email.txt

: A lookup helper that will extract the stored email from our session object

: -------------------------------------------------------------------------------

* Web Server - home

- home renders the main search page

.code code/home.txt

- simple form that posts text entered into search field back to the server

: -------------------------------------------------------------------------------

* Web Server - search

- the main search handler is where the real meat of our app lives

.code code/search_part1.txt

- verify authentication and extract the search text entered

: -------------------------------------------------------------------------------

* Web Server - search cont'd

.code code/search_part2.txt

: This is where most of the key logic lives that lets us take advantage of context to manage our application flow
: #1 - we create a new context derived from the Background context and set a deadline of 2 seconds

: this means that no matter what results we get from duckduckgo or giphy if we don't get them within 2 seconds of the request start we'll just return a default result value

: #2 - we create a resultAndError type inline to use for returning the results of our third party lookups

: #3 - we spin up new goroutines and fire one off for both duckduckgo and giphy return the results on two separate results channels

: -------------------------------------------------------------------------------

* Web Server - search cont'd

.code code/search_part3.txt

: -------------------------------------------------------------------------------

* Web Server - search cont'd

.code code/search_part4.txt

.code code/search_results.txt

: -------------------------------------------------------------------------------

* Components

- Web Server
- session package
- *lookup* package (DuckDuckGo Answers API, Giphy API)

: -------------------------------------------------------------------------------

* Lookup - Duckduckgo

.code code/duckduck_part2.txt

: -------------------------------------------------------------------------------

* Lookup - Duckduckgo (cont'd)

.code code/duckduck_part3.txt

: -------------------------------------------------------------------------------

* Lookup - Giphy

.code code/giphy_part1.txt

: -------------------------------------------------------------------------------

* Lookup - Giphy (cont'd)

.code code/giphy_part3.txt

: -------------------------------------------------------------------------------

* Lookup - Giphy (cont'd)

.code code/giphy_part2.txt

: -------------------------------------------------------------------------------

* Lookup - ctxhttp

- *ctxhttp:* we're using *ctxhttp.Get* to make our http call to giphy

.code code/ctxhttp.txt

: -------------------------------------------------------------------------------

* Lookup - ctxhttp (cont'd)

.code code/ctxhttp_part2.txt

: -------------------------------------------------------------------------------

* Lookup - ctxhttp (cont'd)

.code code/ctxhttp_go17.txt


: -------------------------------------------------------------------------------

* DuckDuckGopher - Demo

- Let's see it in action

: -------------------------------------------------------------------------------

* Thanks

Paul Crawford

paul@dailyburn.com
@paulcrawford

.image images/formal_languages.png