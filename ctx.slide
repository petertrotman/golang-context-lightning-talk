Context package in Go
28 February 2017
Tags: go, golang, context, http

Peter Trotman
Golang Edinburgh Meetup

* Contents

Statement of the problems that Context aims to solve:
- Cancelling request-scoped goroutines
- Transfer of request-scoped data
Overview of the Context library
Context recipes and best practices

* Cancelling request-scoped goroutines

.image images/lifecycle_diagram.png _ 600

    func processData(data []int, out chan int, cancel chan bool) {
        for _, d := range data {
            select {
            case <-cancel:
                return
            default:
                out <- d + 1
            }
        }
    }

* Transfer of request-scoped data - original (1/2)

.code code/example1.txt /^func main/,/^// p1/

* Transfer of request-scoped data - original (2/2)

.code code/example1.txt /^func StatusPage/,/^// p2/

* Transfer of request-scoped data - handler middleware

.code code/example2.txt

* Transfer of request-scoped data - mux middleware

.code code/example3.txt

* The solution - Context

Context provides a standardised structure for controlling the cancellation of spawned goroutines and a key-value store for request-scoped data.

* Some history

The idea to create Context was posted by [[https://groups.google.com/forum/#!msg/golang-nuts/teSBtPvv1GQ/U12qA9N51uIJ][Brad Fitzpatrick]] to the go-nuts mailing list back in 2011.

Later package Context was developed in Google to make it easy to pass request specific values, cancelation, timeout and deadline signals to all goroutines involved in handling a request. Package started it's life under *golang.org/x/net/context*

After becoming more popular and proving to be essential to many Go applications, package was moved [[https://github.com/golang/go/issues/14660][(GitHub issue)]] to standard library and named *context* since context by itself has little to do with networking by itself. 

In Go 1.7 support for contexts has been added to the [[https://golang.org/pkg/net/][net]], [[https://golang.org/pkg/net/http/][net/http]], and [[https://golang.org/pkg/os/exec/][os/exec]] packages.

In this talk we are talking about Context in Go 1.7+


* Context interface

	type Context interface {
	    // Deadline returns the time when work done
	    // on behalf of this context should be canceled.
	    Deadline() (deadline time.Time, ok bool)

	    // Done returns a channel that's closed when work done
	    // on behalf of this context should be canceled.
	    Done() <-chan struct{}

	    // Err returns a non-nil error value after Done is closed.
	    Err() error

	    // Value returns the value associated with this context for key
	    Value(key interface{}) interface{}
	}


* Context functions

	func Background() Context

	func TODO() Context

	func WithCancel(parent Context) (ctx Context, cancel CancelFunc)

	func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)

	func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

	func WithValue(parent Context, key, val interface{}) Context

* Using Context to control goroutines - WithCancel

    func processData(ctx context.Context, data []int, out chan int) {
        for _, d := range data {
            select {
            case <-ctx.Done():
                return
            default:
                out <- d + 1
            }
        }
    }

    func main() {
        chan = make(chan int, 10)
        data = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
        ctx, cancel := context.WithCancel(context.Background())
        go processData(ctx, data, chan)

        ...

        cancel()
    }

* Using Context to control goroutines - WithDeadline / WithTimeout

    func processData(ctx context.Context, data []int, out chan int) {
        for _, d := range data {
            select {
            case <-ctx.Done():
                return
            default:
                out <- d + 1
            }
        }
    }

    func main() {
        chan = make(chan int, 10)
        data = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
        ctx, cancel := context.WithDeadline(
            context.Background(), time.Now().Add(time.Duration(1 * time.Second)
        )
        go processData(ctx, data, chan)
    }

WithTimeout same as WithDuration except without the time.Now().Add(...)

* Using Context for request-scoped data - WithValue

.code code/example4.txt

* Using Context for request-scoped data - WithValue

.code code/example5.txt

* Context.WithValue - Caveats

Context.Value is a map[interface{}]interface{} .

Therefore there is no compile-time checking, and you must remember to cast back to the type you need.

Using Context.Value hides function dependencies

It can be tempting to inject global dependencies with Context.WithValue, but this is frowned upon.

It is possible to have a key collision if multiple middlewares are interacting with the Context.

You can avoid this by having module-local keys, however this means you need to provide getter & setter functions which know the local key to interact with the values.

* Context.WithValue - Suitability

.image images/withvalue-suitability.png _ 750

* Conclusion

Context is an excellent library which standardises the way in which goroutine control and request-scoped values flow through your request handling pipeline.

Context provides methods to shut down goroutines if they are no longer necessary - but you need to check for ctx.Done() in the goroutines.

Context.WithValue gives you a clean way of passing data between handlers and makes implementing middleware very simple.

However, it comes with some downsides - including obscuring handler functionality - so don't over-rely on it.

* References

[[https://golang.org/pkg/context/]]

[[https://www.youtube.com/watch?v=r4Mlm6qEWRs]]

[[https://gocodecloud.com/blog/2016/11/15/simple-golang-http-request-context-example/]]

[[http://www.alexedwards.net/blog/organising-database-access]]

[[https://github.com/dkondratovych/golang-ua-meetup]]
